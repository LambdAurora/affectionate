plugins {
	id 'org.quiltmc.loom' version '1.2.+'
	id 'java-library'
	id 'maven-publish'
	id 'org.quiltmc.gradle.licenser' version '2.0.+'
	id 'com.modrinth.minotaur' version '2.+'
	//id 'com.matthewprenger.cursegradle' version '1.4.+'
}

group = project.maven_group
version = "${project.mod_version}+${project.minecraft_version}"
archivesBaseName = project.archives_base_name

// This field defines the Java version your mod target.
def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

String parseReadme() {
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	def lines = new ArrayList<>(Arrays.asList(readme.split("\n")))
	def it = lines.iterator()

	boolean shouldRemove = false;
	while (it.hasNext()) {
		def line = it.next();

		if (line.equals("<!-- modrinth_exclude.long_start -->")) {
			shouldRemove = true
		}

		if (shouldRemove) {
			it.remove()
		}

		if (line.equals("<!-- modrinth_exclude.long_end -->")) {
			shouldRemove = false
		}
	}

	readme = lines.join("\n")
	//readme = readme.replaceAll(linkRegex, '![$1](https://lambdaurora.dev/affectionate/$2)')
	return readme
}

String fetchChangelog() {
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.mod_version).replace('.', '\\.').replace('+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}(?: - .+)?\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		String changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}

		return changelogContent
	} else {
		return null
	}
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha.")) {
		return "alpha"
	} else if (version.contains("-beta.")) {
		return "beta"
	} else {
		return "release"
	}
}

sourceSets {
	testmod {
		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

loom {
	runs {
		autoTestServer {
			server()
			configName = "Auto test server"
			source(sourceSets.testmod)
			property("quilt.auto_test")
			programArg("--nogui")
		}
	}
}

repositories {
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${project.fabric_api_version}-${minecraft_version}")
	modImplementation("maven.modrinth:ears:${project.ears_version}")

	testmodImplementation sourceSets.main.output
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.deprecation(true)

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('quilt.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('codeformat/HEADER')
	include '**/*.java'
}

modrinth {
	projectId = project.modrinth_id
	versionName = "Affectionate ${project.mod_version} (${getMCVersionString()})"
	gameVersions = [project.minecraft_version]
	loaders = ["quilt"]
	versionType = this.getVersionType()
	uploadFile = tasks.remapJar
	syncBodyFrom = parseReadme()

	dependencies {
		required.project "qsl"
		optional.project "ears"
	}

	// Changelog fetching
	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

/*
I cannot publish to CurseForge since they decided this project was inappropriate.
Still awaiting a response from them.
curseforge {
	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
	}

	project {
		id = project.curseforge_id
		releaseType = this.getVersionType()
		addGameVersion project.minecraft_version
		addGameVersion "Quilt"
		addGameVersion "Java 17"
		addGameVersion "Java 18"

		// Changelog fetching
		def changelogContent = fetchChangelog()

		if (changelogContent) {
			changelogType = "markdown"
			changelog = "Changelog:\n\n${changelogContent}"
		} else {
			afterEvaluate {
				uploadTask.setEnabled(false)
			}
		}

		mainArtifact(remapJar) {
			displayName = "Affectionate ${project.mod_version} (${getMCVersionString()})"

			relations {
				requiredDependency "qsl"
				optionalDependency "ears"
			}
		}

		afterEvaluate {
			uploadTask.setGroup("publishing")
			uploadTask.dependsOn("remapJar")
		}
	}
}
tasks.curseforge.setGroup("publishing")
 */

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
